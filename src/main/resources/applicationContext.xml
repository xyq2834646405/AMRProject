<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd">
    <!--注解配置-->
    <context:annotation-config/>
    <!--自动扫描注解-->
    <context:component-scan base-package="com.xyq"/>
    <!--读取配置文件-->
    <context:property-placeholder location="classpath:database.properties"/>
    <!--配置Druid的日志配置-->
    <bean id="log" class="com.xyq.filter.LogFilter">
        <property name="connectionLogEnabled" value="false"/>
        <property name="connectionConnectBeforeLogEnabled" value="false"/>
        <property name="connectionConnectAfterLogEnabled" value="false"/>
        <property name="connectionCommitAfterLogEnabled" value="false"/>
        <property name="connectionRollbackAfterLogEnabled" value="false"/>
        <property name="connectionCloseAfterLogEnabled" value="false"/>
        <property name="connectionLogErrorEnabled" value="false"/>
        <property name="dataSourceLogEnabled" value="false"/>
        <property name="statementLogEnabled" value="false"/>
        <property name="statementLogErrorEnabled" value="false"/>
        <property name="statementCreateAfterLogEnabled" value="false"/>
        <property name="statementPrepareAfterLogEnabled" value="false"/>
        <property name="statementPrepareCallAfterLogEnabled" value="false"/>
        <property name="statementExecuteAfterLogEnabled" value="false"/>
        <property name="statementExecuteQueryAfterLogEnabled" value="false"/>
        <property name="statementExecuteUpdateAfterLogEnabled" value="false"/>
        <property name="statementExecuteBatchAfterLogEnabled" value="false"/>
        <property name="statementCloseAfterLogEnabled" value="false"/>
        <property name="statementParameterSetLogEnabled" value="false"/>
        <property name="statementExecutableSqlLogEnable" value="false"/>
        <property name="statementSqlPrettyFormat" value="false"/>
        <property name="statementParameterClearLogEnable" value="false"/>
        <property name="resultSetLogEnabled" value="true"/>
        <property name="resultSetLogErrorEnabled" value="false"/>
        <property name="resultSetNextAfterLogEnabled" value="true"/>
        <property name="resultSetOpenAfterLogEnabled" value="true"/>
        <property name="resultSetCloseAfterLogEnabled" value="false"/>

    </bean>
    <!--dataSource-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${db.driver}"/>
        <property name="url" value="${db.url}"/>
        <property name="username" value="${db.user}"/>
        <property name="password" value="${db.password}"/>
        <property name="initialSize" value="${db.initialPoolSize}"/>
        <property name="minIdle" value="${db.minPoolSize}"/>
        <property name="maxActive" value="${db.maxPoolSize}"/>
        <property name="maxWait" value="${db.maxIdleTime}"/>
        <property name="proxyFilters">
            <list>
                <ref bean="log"/>
            </list>
        </property>
    </bean>
    <!--transactionManager-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--sessionFactory-->
    <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis.cfg.xml"/>
    </bean>
    <!--springmvc注解配置-->
    <mvc:annotation-driven/>
    <!--启动请求的servlet-->
    <mvc:default-servlet-handler/>
    <!--配置拦截器-->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**/*.action"/>
            <bean class="com.xyq.interceptor.MyInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>
    <!--配置资源-->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basenames">
            <array>
                <value>Messages</value>
                <value>Pages</value>
                <value>Validations</value>
            </array>
        </property>
    </bean>
    <!--事务声明-->
    <tx:annotation-driven transaction-manager="transactionManager" />
    <!--事务配置-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="login*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="new*" propagation="REQUIRED" />
            <tx:method name="set*" propagation="REQUIRED" />
            <tx:method name="change*" propagation="REQUIRED" />
            <tx:method name="edit*" propagation="REQUIRED" />
            <tx:method name="remove*" propagation="REQUIRED" />
            <tx:method name="check*" propagation="REQUIRED" read-only="true" />
            <tx:method name="get*" propagation="REQUIRED" read-only="true" />
            <tx:method name="find*" propagation="REQUIRED" read-only="true" />
            <tx:method name="list*" propagation="REQUIRED" read-only="true" />
            <tx:method name="load*" propagation="REQUIRED" read-only="true" />
            <tx:method name="exists*" propagation="REQUIRED" read-only="true" />
            <tx:method name="*" propagation="REQUIRED" read-only="true" />
        </tx:attributes>
    </tx:advice>
    <!--配置事务切入点-->
    <aop:config expose-proxy="true">
        <aop:pointcut id="txPointcut" expression="execution(* com.xyq.service.impl.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>
    <!--文件上传-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="5242880"/>
        <property name="maxInMemorySize" value="2097152"/>
        <property name="resolveLazily" value="true"/>
    </bean>
    <!--异常跳转定义-->
    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">/error.jsp</prop>
            </props>
        </property>
    </bean>
</beans>